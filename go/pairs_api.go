/* 
 * QuantiModo
 *
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"net/url"
	"strings"
	"encoding/json"
)

type PairsApi struct {
	Configuration *Configuration
}

func NewPairsApi() *PairsApi {
	configuration := NewConfiguration()
	return &PairsApi{
		Configuration: configuration,
	}
}

func NewPairsApiWithBasePath(basePath string) *PairsApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &PairsApi{
		Configuration: configuration,
	}
}

/**
 * Get pairs
 * Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
 *
 * @param cause Original variable name for the explanatory or independent variable
 * @param effect Original variable name for the outcome or dependent variable
 * @param accessToken User&#39;s OAuth2 access token
 * @param userId User&#39;s id
 * @param causeSource Name of data source that the cause measurements should come from
 * @param causeUnit Abbreviated name for the unit cause measurements to be returned in
 * @param delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
 * @param duration The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
 * @param effectSource Name of data source that the effectmeasurements should come from
 * @param effectUnit Abbreviated name for the unit effect measurements to be returned in
 * @param endTime The most recent date (in epoch time) for which we should return measurements
 * @param startTime The earliest date (in epoch time) for which we should return measurements
 * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
 * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
 * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
 * @return []Pairs
 */
func (a PairsApi) V1PairsCsvGet(cause string, effect string, accessToken string, userId int32, causeSource string, causeUnit string, delay string, duration string, effectSource string, effectUnit string, endTime string, startTime string, limit int32, offset int32, sort int32) ([]Pairs, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/v1/pairsCsv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(access_token)' required
	// set key with prefix in query string
	localVarQueryParams["access_token"] =  a.Configuration.GetAPIKeyWithPrefix("access_token")
	// authentication '(quantimodo_oauth2)' required
	// oauth required
	if a.Configuration.AccessToken != ""{
		localVarHeaderParams["Authorization"] =  "Bearer " + a.Configuration.AccessToken
	}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
		localVarQueryParams.Add("access_token", a.Configuration.APIClient.ParameterToString(accessToken, ""))
		localVarQueryParams.Add("userId", a.Configuration.APIClient.ParameterToString(userId, ""))
		localVarQueryParams.Add("cause", a.Configuration.APIClient.ParameterToString(cause, ""))
		localVarQueryParams.Add("causeSource", a.Configuration.APIClient.ParameterToString(causeSource, ""))
		localVarQueryParams.Add("causeUnit", a.Configuration.APIClient.ParameterToString(causeUnit, ""))
		localVarQueryParams.Add("delay", a.Configuration.APIClient.ParameterToString(delay, ""))
		localVarQueryParams.Add("duration", a.Configuration.APIClient.ParameterToString(duration, ""))
		localVarQueryParams.Add("effect", a.Configuration.APIClient.ParameterToString(effect, ""))
		localVarQueryParams.Add("effectSource", a.Configuration.APIClient.ParameterToString(effectSource, ""))
		localVarQueryParams.Add("effectUnit", a.Configuration.APIClient.ParameterToString(effectUnit, ""))
		localVarQueryParams.Add("endTime", a.Configuration.APIClient.ParameterToString(endTime, ""))
		localVarQueryParams.Add("startTime", a.Configuration.APIClient.ParameterToString(startTime, ""))
		localVarQueryParams.Add("limit", a.Configuration.APIClient.ParameterToString(limit, ""))
		localVarQueryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))
		localVarQueryParams.Add("sort", a.Configuration.APIClient.ParameterToString(sort, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new([]Pairs)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "V1PairsCsvGet", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return *successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return *successPayload, localVarAPIResponse, err
}

/**
 * Get pairs
 * Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
 *
 * @param cause Original variable name for the explanatory or independent variable
 * @param effect Original variable name for the outcome or dependent variable
 * @param accessToken User&#39;s OAuth2 access token
 * @param userId User&#39;s id
 * @param causeSource Name of data source that the cause measurements should come from
 * @param causeUnit Abbreviated name for the unit cause measurements to be returned in
 * @param delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
 * @param duration The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
 * @param effectSource Name of data source that the effectmeasurements should come from
 * @param effectUnit Abbreviated name for the unit effect measurements to be returned in
 * @param endTime The most recent date (in epoch time) for which we should return measurements
 * @param startTime The earliest date (in epoch time) for which we should return measurements
 * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
 * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
 * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
 * @return []Pairs
 */
func (a PairsApi) V1PairsGet(cause string, effect string, accessToken string, userId int32, causeSource string, causeUnit string, delay string, duration string, effectSource string, effectUnit string, endTime string, startTime string, limit int32, offset int32, sort int32) ([]Pairs, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/v1/pairs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(access_token)' required
	// set key with prefix in query string
	localVarQueryParams["access_token"] =  a.Configuration.GetAPIKeyWithPrefix("access_token")
	// authentication '(quantimodo_oauth2)' required
	// oauth required
	if a.Configuration.AccessToken != ""{
		localVarHeaderParams["Authorization"] =  "Bearer " + a.Configuration.AccessToken
	}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
		localVarQueryParams.Add("access_token", a.Configuration.APIClient.ParameterToString(accessToken, ""))
		localVarQueryParams.Add("userId", a.Configuration.APIClient.ParameterToString(userId, ""))
		localVarQueryParams.Add("cause", a.Configuration.APIClient.ParameterToString(cause, ""))
		localVarQueryParams.Add("causeSource", a.Configuration.APIClient.ParameterToString(causeSource, ""))
		localVarQueryParams.Add("causeUnit", a.Configuration.APIClient.ParameterToString(causeUnit, ""))
		localVarQueryParams.Add("delay", a.Configuration.APIClient.ParameterToString(delay, ""))
		localVarQueryParams.Add("duration", a.Configuration.APIClient.ParameterToString(duration, ""))
		localVarQueryParams.Add("effect", a.Configuration.APIClient.ParameterToString(effect, ""))
		localVarQueryParams.Add("effectSource", a.Configuration.APIClient.ParameterToString(effectSource, ""))
		localVarQueryParams.Add("effectUnit", a.Configuration.APIClient.ParameterToString(effectUnit, ""))
		localVarQueryParams.Add("endTime", a.Configuration.APIClient.ParameterToString(endTime, ""))
		localVarQueryParams.Add("startTime", a.Configuration.APIClient.ParameterToString(startTime, ""))
		localVarQueryParams.Add("limit", a.Configuration.APIClient.ParameterToString(limit, ""))
		localVarQueryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))
		localVarQueryParams.Add("sort", a.Configuration.APIClient.ParameterToString(sort, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new([]Pairs)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "V1PairsGet", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return *successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return *successPayload, localVarAPIResponse, err
}

