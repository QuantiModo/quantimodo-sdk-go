/* 
 * QuantiModo
 *
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"time"
)

type UserVariable struct {

	// ID of the parent variable if this variable has any parent
	ParentId int32 `json:"parentId,omitempty"`

	// User ID
	UserId int32 `json:"userId,omitempty"`

	// clientId
	ClientId string `json:"clientId,omitempty"`

	// ID of variable
	VariableId int32 `json:"variableId,omitempty"`

	// ID of unit to use for this variable
	DefaultUnitId int32 `json:"defaultUnitId,omitempty"`

	// The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.
	MinimumAllowedValue float32 `json:"minimumAllowedValue,omitempty"`

	// The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.
	MaximumAllowedValue float32 `json:"maximumAllowedValue,omitempty"`

	// When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.
	FillingValue float32 `json:"fillingValue,omitempty"`

	// The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables
	JoinWith int32 `json:"joinWith,omitempty"`

	// The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
	OnsetDelay int32 `json:"onsetDelay,omitempty"`

	// The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
	DurationOfAction int32 `json:"durationOfAction,omitempty"`

	// ID of variable category
	VariableCategoryId int32 `json:"variableCategoryId,omitempty"`

	// updated
	Updated int32 `json:"updated,omitempty"`

	// Is variable public
	Public int32 `json:"public,omitempty"`

	// A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user
	CauseOnly bool `json:"causeOnly,omitempty"`

	// 0 -> No filling, 1 -> Use filling-value
	FillingType string `json:"fillingType,omitempty"`

	// Number of measurements
	NumberOfMeasurements int32 `json:"numberOfMeasurements,omitempty"`

	// Number of processed measurements
	NumberOfProcessedDailyMeasurements int32 `json:"numberOfProcessedDailyMeasurements,omitempty"`

	// Number of measurements at last analysis
	MeasurementsAtLastAnalysis int32 `json:"measurementsAtLastAnalysis,omitempty"`

	// ID of last Unit
	LastUnitId int32 `json:"lastUnitId,omitempty"`

	// ID of last original Unit
	LastOriginalUnitId int32 `json:"lastOriginalUnitId,omitempty"`

	// Last Value
	LastValue float32 `json:"lastValue,omitempty"`

	// Last original value which is stored
	LastOriginalValue int32 `json:"lastOriginalValue,omitempty"`

	// Number of correlations for this variable
	NumberOfCorrelations int32 `json:"numberOfCorrelations,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// error_message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// When this variable or its settings were last updated
	LastSuccessfulUpdateTime time.Time `json:"lastSuccessfulUpdateTime,omitempty"`

	// Standard deviation
	StandardDeviation float32 `json:"standard_deviation,omitempty"`

	// Variance
	Variance float32 `json:"variance,omitempty"`

	// Minimum recorded value of this variable
	MinimumRecordedValue float32 `json:"minimumRecordedValue,omitempty"`

	// Maximum recorded daily value of this variable
	MaximumRecordedDailyValue float32 `json:"maximumRecordedDailyValue,omitempty"`

	// Mean
	Mean float32 `json:"mean,omitempty"`

	// Median
	Median float32 `json:"median,omitempty"`

	// Most common Unit ID
	MostCommonUnitId int32 `json:"mostCommonUnitId,omitempty"`

	// Most common value
	MostCommonValue float32 `json:"mostCommonValue,omitempty"`

	// Number of unique daily values
	NumberOfUniqueDailyValues float32 `json:"numberOfUniqueDailyValues,omitempty"`

	// Number of changes
	NumberOfChanges int32 `json:"numberOfChanges,omitempty"`

	// Skewness
	Skewness float32 `json:"skewness,omitempty"`

	// Kurtosis
	Kurtosis float32 `json:"kurtosis,omitempty"`

	// Latitude
	Latitude float32 `json:"latitude,omitempty"`

	// Longitude
	Longitude float32 `json:"longitude,omitempty"`

	// Location
	Location string `json:"location,omitempty"`

	// Earliest measurement start_time to be used in analysis. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format
	ExperimentStartTime time.Time `json:"experimentStartTime,omitempty"`

	// Latest measurement start_time to be used in analysis. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format
	ExperimentEndTime time.Time `json:"experimentEndTime,omitempty"`

	// When the record was first created. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format
	CreatedAt time.Time `json:"createdAt,omitempty"`

	// When the record in the database was last updated. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format
	UpdatedAt time.Time `json:"updatedAt,omitempty"`

	// Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors. These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables
	Outcome bool `json:"outcome,omitempty"`

	// Comma-separated list of source names to limit variables to those sources
	Sources string `json:"sources,omitempty"`

	// Earliest source time
	EarliestSourceTime int32 `json:"earliestSourceTime,omitempty"`

	// Latest source time
	LatestSourceTime int32 `json:"latestSourceTime,omitempty"`

	// Earliest measurement time
	EarliestMeasurementTime int32 `json:"earliestMeasurementTime,omitempty"`

	// Latest measurement time
	LatestMeasurementTime int32 `json:"latestMeasurementTime,omitempty"`

	// Earliest filling time
	EarliestFillingTime int32 `json:"earliestFillingTime,omitempty"`

	// Latest filling time
	LatestFillingTime int32 `json:"latestFillingTime,omitempty"`

	// 
	ImageUrl string `json:"imageUrl,omitempty"`

	// 
	IonIcon string `json:"ionIcon,omitempty"`
}
