/* 
 * QuantiModo
 *
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"time"
)

type TrackingReminder struct {

	// id
	Id int32 `json:"id,omitempty"`

	// clientId
	ClientId string `json:"clientId,omitempty"`

	// ID of User
	UserId int32 `json:"userId,omitempty"`

	// Id for the variable to be tracked
	VariableId int32 `json:"variableId,omitempty"`

	// Default value to use for the measurement when tracking
	DefaultValue float32 `json:"defaultValue,omitempty"`

	// Earliest time of day at which reminders should appear in UTC HH:MM:SS format
	ReminderStartTime string `json:"reminderStartTime,omitempty"`

	// Latest time of day at which reminders should appear in UTC HH:MM:SS format
	ReminderEndTime string `json:"reminderEndTime,omitempty"`

	// String identifier for the sound to accompany the reminder
	ReminderSound string `json:"reminderSound,omitempty"`

	// Number of seconds between one reminder and the next
	ReminderFrequency int32 `json:"reminderFrequency,omitempty"`

	// True if the reminders should appear as a popup notification
	PopUp bool `json:"popUp,omitempty"`

	// True if the reminders should be delivered via SMS
	Sms bool `json:"sms,omitempty"`

	// True if the reminders should be delivered via email
	Email bool `json:"email,omitempty"`

	// True if the reminders should appear in the notification bar
	NotificationBar bool `json:"notificationBar,omitempty"`

	// UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  timestamp for the reminder time of the latest tracking reminder notification that has been pre-emptively generated in the database
	LatestTrackingReminderNotificationReminderTime time.Time `json:"latestTrackingReminderNotificationReminderTime,omitempty"`

	// UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  timestamp for the last time a measurement was received for this user and variable
	LastTracked time.Time `json:"lastTracked,omitempty"`

	// Earliest date on which the user should be reminded to track in YYYY-MM-DD format
	StartTrackingDate string `json:"startTrackingDate,omitempty"`

	// Latest date on which the user should be reminded to track in YYYY-MM-DD format
	StopTrackingDate string `json:"stopTrackingDate,omitempty"`

	// When the record in the database was last updated. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format. Time zone should be UTC and not local.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`

	// Name of the variable to be used when sending measurements
	VariableName string `json:"variableName,omitempty"`

	// Name of the variable category to be used when sending measurements
	VariableCategoryName string `json:"variableCategoryName,omitempty"`

	// Abbreviated name of the unit to be used when sending measurements
	UnitAbbreviatedName string `json:"unitAbbreviatedName,omitempty"`

	// The way multiple measurements are aggregated over time
	CombinationOperation string `json:"combinationOperation,omitempty"`
}
