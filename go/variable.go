/* 
 * QuantiModo
 *
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

type Variable struct {

	// Variable ID
	Id int32 `json:"id,omitempty"`

	// User-defined variable display name.
	Name string `json:"name,omitempty"`

	// Variable category like Mood, Sleep, Physical Activity, Treatment, Symptom, etc.
	Category string `json:"category,omitempty"`

	// Abbreviated name of the default unit for the variable
	UnitAbbreviatedName string `json:"unitAbbreviatedName,omitempty"`

	// Id of the default unit for the variable
	AbbreviatedUnitId int32 `json:"abbreviatedUnitId,omitempty"`

	// Comma-separated list of source names to limit variables to those sources
	Sources string `json:"sources,omitempty"`

	// The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.
	MinimumAllowedValue float64 `json:"minimumAllowedValue,omitempty"`

	// The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.
	MaximumAllowedValue float64 `json:"maximumAllowedValue,omitempty"`

	// Way to aggregate measurements over time. Options are \"MEAN\" or \"SUM\". SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.
	CombinationOperation string `json:"combinationOperation,omitempty"`

	// When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.
	FillingValue float64 `json:"fillingValue,omitempty"`

	// The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables.
	JoinWith string `json:"joinWith,omitempty"`

	// Array of Variables that are joined with this Variable
	JoinedVariables []Variable `json:"joinedVariables,omitempty"`

	// Id of the parent variable if this variable has any parent
	Parent int32 `json:"parent,omitempty"`

	// Array of Variables that are sub variables to this Variable
	SubVariables []Variable `json:"subVariables,omitempty"`

	// The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
	OnsetDelay int32 `json:"onsetDelay,omitempty"`

	// The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
	DurationOfAction int32 `json:"durationOfAction,omitempty"`

	// Earliest measurement time
	EarliestMeasurementTime int32 `json:"earliestMeasurementTime,omitempty"`

	// Latest measurement time
	LatestMeasurementTime int32 `json:"latestMeasurementTime,omitempty"`

	// When this variable or its settings were last updated
	Updated int32 `json:"updated,omitempty"`

	// A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user.
	CauseOnly int32 `json:"causeOnly,omitempty"`

	// Number of correlations
	NumberOfCorrelations int32 `json:"numberOfCorrelations,omitempty"`

	// Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors. These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables.
	Outcome int32 `json:"outcome,omitempty"`

	// The number of measurements that a given user had for this variable the last time a correlation calculation was performed. Generally correlation values are only updated once the current number of measurements for a variable is more than 10% greater than the rawMeasurementsAtLastAnalysis.  This avoids a computationally-demanding recalculation when there's not enough new data to make a significant difference in the correlation.
	RawMeasurementsAtLastAnalysis int32 `json:"rawMeasurementsAtLastAnalysis,omitempty"`

	// Number of measurements
	NumberOfRawMeasurements int32 `json:"numberOfRawMeasurements,omitempty"`

	// Last unit
	LastUnit string `json:"lastUnit,omitempty"`

	// Last value
	LastValue int32 `json:"lastValue,omitempty"`

	// Most common value
	MostCommonValue int32 `json:"mostCommonValue,omitempty"`

	// Most common unit
	MostCommonUnit string `json:"mostCommonUnit,omitempty"`

	// Last source
	LastSource int32 `json:"lastSource,omitempty"`

	// 
	ImageUrl string `json:"imageUrl,omitempty"`

	// 
	IonIcon string `json:"ionIcon,omitempty"`
}
